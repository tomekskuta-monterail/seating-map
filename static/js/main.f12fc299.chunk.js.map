{"version":3,"sources":["components/Logs.tsx","constants-data.ts","utils.ts","components/SeatingMap.tsx","components/Sectors.tsx","components/Legend.tsx","seating-map.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","div","Logs","props","hoveredSector","selectedSector","sectors","colors","classNames","replaceEscapedCharactersWithWhitespace","name","replace","getSection","mapRefElement","sectionId","querySelector","cloneElement","element","clonedElement","cloneNode","classList","add","firstChild","SVGElement","appendChild","removeClonedElement","removeChild","MapWrapper","SeatingMap","map","setHoveredSector","setSelectedSector","mapRef","useRef","current","useLayoutEffect","forEach","sectorId","dataset","active","SVGGElement","children","length","Array","from","childElement","groupId","id","clonedChildren","reduce","acc","remove","ref","dangerouslySetInnerHTML","__html","onMouseOver","event","target","onClick","selectedId","Sector","button","selected","hovered","Sectors","sector","onMouseEnter","onMouseLeave","LegendList","ul","LegendItem","li","color","Legend","H1","h1","App","useState","mapFile","setMapFile","fetchMap","cancelToken","a","axios","get","seatingMapFile","data","useEffect","cancelTokenSource","CancelToken","source","token","cancel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f12fc299.chunk.js","sourcesContent":["import styled from 'styled-components';\n\ntype Props = {\n  hoveredSector: string | null;\n  selectedSector: string | null;\n};\n\nconst Wrapper = styled.div`\n  margin: 0 40px;\n\n  & div:first-child {\n    margin-bottom: 8px;\n  }\n\n  & span {\n    margin-right: 10px;\n  }\n`;\n\nfunction Logs(props: Props) {\n  const { hoveredSector, selectedSector } = props;\n\n  return (\n    <Wrapper>\n      <div>\n        <span>Hovered Sector:</span>\n        <strong>{hoveredSector}</strong>\n      </div>\n      <div>\n        <span>Selected Sector:</span>\n        <strong>{selectedSector}</strong>\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default Logs;\n","export const sectors = [\n  'Sector A',\n  'Sector B',\n  'Sector C',\n  'Sector D',\n  'Sector E',\n  'Sector F',\n  'Vip Sector',\n  'Grouped Sectors',\n];\n\nexport const colors = {\n  active: '#e07a5f',\n  hovered: '#f6deb6',\n  selected: '#ecb45b',\n  unavailable: '#d9d9d9',\n};\n\nexport const classNames = {\n  active: 'seating-map--active-sector',\n  hovered: 'seating-map--hover-sector',\n  selected: 'seating-map--selected-sector',\n  cloned: 'seating-map--cloned-sector',\n};\n","import { classNames } from 'constants-data';\n\nexport const replaceEscapedCharactersWithWhitespace = (name?: string) =>\n  name?.replace(/(_x5F_)|(_)/g, ' ') || null;\n\nexport const getSection = (\n  mapRefElement: HTMLDivElement | null,\n  sectionId: string,\n) =>\n  mapRefElement?.querySelector(`#${sectionId?.replace(/ /g, '_')}`) ||\n  mapRefElement?.querySelector(`#${sectionId?.replace(/ /g, '_x5F_')}`);\n\nexport const cloneElement = (\n  element: SVGElement | HTMLElement,\n  mapRefElement: HTMLElement | null,\n) => {\n  const clonedElement = element?.cloneNode() as SVGElement;\n  clonedElement?.classList.add(classNames.cloned);\n\n  if (mapRefElement?.firstChild instanceof SVGElement) {\n    mapRefElement?.firstChild?.appendChild(clonedElement);\n  }\n\n  return clonedElement;\n};\n\nexport const removeClonedElement = (\n  element: SVGElement | HTMLElement,\n  mapRefElement: HTMLElement | null,\n) => {\n  if (element && mapRefElement?.firstChild instanceof SVGElement) {\n    mapRefElement?.firstChild?.removeChild(element);\n  }\n};\n","import { useLayoutEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport {\n  cloneElement,\n  getSection,\n  removeClonedElement,\n  replaceEscapedCharactersWithWhitespace,\n} from 'utils';\nimport { sectors, classNames, colors } from 'constants-data';\n\ntype Props = {\n  map: string | null;\n  hoveredSector: string | null;\n  selectedSector: string | null;\n  setHoveredSector: (sector: string | null) => void;\n  setSelectedSector: (sector: string | null) => void;\n};\n\nconst MapWrapper = styled.div`\n  & * {\n    transition: fill 0.2s;\n  }\n\n  & *.${classNames.active}, & *.${classNames.active} * {\n    fill: ${colors.active};\n    cursor: pointer;\n  }\n\n  & *.${classNames.selected}, & *.${classNames.selected} * {\n    fill: ${colors.selected};\n  }\n\n  @media (hover: hover) {\n    & *.${classNames.hovered}, & *.${classNames.hovered} * {\n      fill: ${colors.hovered};\n    }\n  }\n\n  & *.${classNames.cloned}, & *.${classNames.cloned} * {\n    fill: transparent;\n    stroke: transparent;\n  }\n`;\n\nfunction SeatingMap(props: Props) {\n  const {\n    map,\n    hoveredSector,\n    selectedSector,\n    setHoveredSector,\n    setSelectedSector,\n  } = props;\n\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapRefElement = mapRef.current;\n\n  useLayoutEffect(() => {\n    if (!map || !mapRef.current) {\n      return;\n    }\n\n    sectors.forEach((sectorId) => {\n      const element = getSection(mapRef.current, sectorId);\n\n      if (element instanceof SVGElement) {\n        element.classList.add(classNames.active);\n        element.dataset.active = 'true';\n\n        if (element instanceof SVGGElement && element.children?.length) {\n          Array.from(element.children).forEach((childElement) => {\n            if (childElement instanceof SVGElement) {\n              childElement.classList.add(classNames.active);\n              childElement.dataset.active = 'true';\n              childElement.dataset.groupId = element.id;\n            }\n          });\n        }\n      }\n    });\n  }, [map, mapRef]);\n\n  useLayoutEffect(() => {\n    if (!hoveredSector || !mapRefElement) {\n      return;\n    }\n\n    const element = getSection(mapRefElement, hoveredSector);\n\n    element?.classList.add(classNames.hovered);\n\n    let clonedElement: SVGElement;\n    let clonedChildren: SVGElement[];\n\n    if (element instanceof SVGGElement && element.children?.length) {\n      clonedChildren = Array.from(element.children).reduce<SVGElement[]>(\n        (acc, childElement) => {\n          if (childElement instanceof SVGElement) {\n            return [...acc, cloneElement(childElement, mapRefElement)];\n          }\n          return acc;\n        },\n        [],\n      );\n    } else if (element instanceof SVGElement) {\n      clonedElement = cloneElement(element, mapRefElement);\n    }\n\n    return () => {\n      removeClonedElement(clonedElement, mapRefElement);\n      clonedChildren?.length &&\n        clonedChildren?.forEach((childElement) =>\n          removeClonedElement(childElement, mapRefElement),\n        );\n\n      element?.classList.remove(classNames.hovered);\n    };\n  }, [hoveredSector, mapRefElement]);\n\n  useLayoutEffect(() => {\n    if (!selectedSector || !mapRefElement) {\n      return;\n    }\n\n    const element = getSection(mapRefElement, selectedSector);\n\n    element?.classList.add(classNames.selected);\n\n    return () => {\n      element?.classList.remove(classNames.selected);\n    };\n  }, [selectedSector, mapRefElement]);\n\n  const onMouseOver = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (\n      event.target instanceof SVGElement &&\n      event.target?.dataset.active === 'true'\n    ) {\n      setHoveredSector(\n        replaceEscapedCharactersWithWhitespace(\n          event.target.dataset.groupId || event.target.id,\n        ),\n      );\n    } else {\n      setHoveredSector(null);\n    }\n  };\n\n  const onClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (\n      event.target instanceof SVGElement &&\n      event.target?.dataset.active === 'true'\n    ) {\n      const selectedId = replaceEscapedCharactersWithWhitespace(\n        event.target.dataset.groupId || event.target.id,\n      );\n      setSelectedSector(selectedId === selectedSector ? null : selectedId);\n    }\n  };\n\n  return map ? (\n    <MapWrapper\n      ref={mapRef}\n      dangerouslySetInnerHTML={{ __html: map }}\n      onMouseOver={onMouseOver}\n      onClick={onClick}\n    />\n  ) : null;\n}\n\nexport default SeatingMap;\n","import styled from 'styled-components';\n\nimport { sectors, colors } from 'constants-data';\n\ntype Props = {\n  hoveredSector: string | null;\n  selectedSector: string | null;\n  setHoveredSector: (sector: string | null) => void;\n  setSelectedSector: (sector: string | null) => void;\n};\n\ntype SectorProps = {\n  hovered: boolean;\n  selected: boolean;\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  max-width: 900px;\n  margin: 20px auto;\n`;\n\nconst Sector = styled.button<SectorProps>`\n  padding: 5px;\n  margin-bottom: 10px;\n  background-color: ${({ selected }) =>\n    selected ? colors.selected : 'transparent'};\n  border: 1px black solid;\n  border-radius: 50px;\n  transition: background-color 0.2s;\n  cursor: pointer;\n\n  &:not(:last-of-type) {\n    margin-right: 10px;\n  }\n\n  @media (hover: hover) {\n    ${({ hovered }) => hovered && `background-color: ${colors.hovered};`}\n  }\n`;\n\nfunction Sectors(props: Props) {\n  const {\n    hoveredSector,\n    selectedSector,\n    setHoveredSector,\n    setSelectedSector,\n  } = props;\n\n  const onClick = (sector: string) => {\n    const newSelectedSector = selectedSector === sector ? null : sector;\n    setSelectedSector(newSelectedSector);\n  };\n\n  return (\n    <Wrapper>\n      {sectors.map((sector) => (\n        <Sector\n          key={sector}\n          hovered={sector === hoveredSector}\n          selected={sector === selectedSector}\n          onMouseEnter={() => setHoveredSector(sector)}\n          onMouseLeave={() => setHoveredSector(null)}\n          onClick={() => onClick(sector)}\n        >\n          {sector}\n        </Sector>\n      ))}\n    </Wrapper>\n  );\n}\n\nexport default Sectors;\n","import styled from 'styled-components';\n\nimport { colors } from 'constants-data';\n\nconst LegendList = styled.ul`\n  padding-left: 0;\n`;\n\nconst LegendItem = styled.li<{ color: string }>`\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n\n  & div {\n    width: 8px;\n    height: 8px;\n    background-color: ${({ color }) => color};\n    margin-right: 8px;\n  }\n`;\n\nfunction Legend() {\n  return (\n    <LegendList>\n      <LegendItem color={colors.selected}>\n        <div />\n        Selected\n      </LegendItem>\n      <LegendItem color={colors.active}>\n        <div />\n        Available\n      </LegendItem>\n      <LegendItem color={colors.unavailable}>\n        <div />\n        Unavailable\n      </LegendItem>\n    </LegendList>\n  );\n}\n\nexport default Legend;\n","export default __webpack_public_path__ + \"static/media/seating-map.12c478b1.svg\";","import { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios, { CancelTokenSource } from 'axios';\n\nimport Logs from 'components/Logs';\nimport SeatingMap from 'components/SeatingMap';\nimport Sectors from 'components/Sectors';\nimport Legend from 'components/Legend';\n\nimport seatingMapFile from 'seating-map.svg';\n\nconst H1 = styled.h1`\n  padding: 0 40px;\n`;\n\nconst MapWrapper = styled.div`\n  margin: 40px auto;\n  max-width: 600px;\n`;\n\nfunction App() {\n  const [mapFile, setMapFile] = useState<string | null>(null);\n  const [hoveredSector, setHoveredSector] = useState<string | null>(null);\n  const [selectedSector, setSelectedSector] = useState<string | null>(null);\n\n  const fetchMap = async (cancelToken: CancelTokenSource['token']) => {\n    const map = (await axios.get(seatingMapFile, { cancelToken })).data;\n    setMapFile(map);\n  };\n\n  useEffect(() => {\n    const cancelTokenSource = axios.CancelToken.source();\n\n    fetchMap(cancelTokenSource.token);\n\n    return () => {\n      cancelTokenSource.cancel();\n    };\n  }, []);\n\n  return (\n    <>\n      <header>\n        <H1>Seating Map</H1>\n      </header>\n      <Logs hoveredSector={hoveredSector} selectedSector={selectedSector} />\n      <Sectors\n        hoveredSector={hoveredSector}\n        selectedSector={selectedSector}\n        setHoveredSector={setHoveredSector}\n        setSelectedSector={setSelectedSector}\n      />\n      <MapWrapper>\n        <SeatingMap\n          map={mapFile}\n          hoveredSector={hoveredSector}\n          selectedSector={selectedSector}\n          setHoveredSector={setHoveredSector}\n          setSelectedSector={setSelectedSector}\n        />\n        <Legend />\n      </MapWrapper>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}